{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { createVNode as _createVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withId = /*#__PURE__*/_withScopeId(\"data-v-7df97fb4\");\n\n_pushScopeId(\"data-v-7df97fb4\");\n\nvar _hoisted_1 = /*#__PURE__*/_createVNode(\"option\", {\n  value: \"\"\n}, \"전체\", -1\n/* HOISTED */\n);\n\nvar _hoisted_2 = /*#__PURE__*/_createVNode(\"option\", {\n  value: \"male\"\n}, \"남자\", -1\n/* HOISTED */\n);\n\nvar _hoisted_3 = /*#__PURE__*/_createVNode(\"option\", {\n  value: \"female\"\n}, \"여자\", -1\n/* HOISTED */\n);\n\nvar _hoisted_4 = {\n  class: \"userTable\"\n};\n\nvar _hoisted_5 = /*#__PURE__*/_createVNode(\"thead\", null, [/*#__PURE__*/_createVNode(\"tr\", null, [/*#__PURE__*/_createVNode(\"td\", null, \"이름\"), /*#__PURE__*/_createVNode(\"td\", null, \"나이\"), /*#__PURE__*/_createVNode(\"td\", null, \"성별\")])], -1\n/* HOISTED */\n);\n\n_popScopeId();\n\nexport var render = /*#__PURE__*/_withId(function (_ctx, _cache) {\n  return _openBlock(), _createBlock(\"div\", null, [_withDirectives(_createVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.selectedGender = $event;\n    })\n  }, [_hoisted_1, _hoisted_2, _hoisted_3], 512\n  /* NEED_PATCH */\n  ), [[_vModelSelect, _ctx.selectedGender]]), _withDirectives(_createVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return _ctx.searchName = $event;\n    })\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.searchName]]), _createVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = function () {\n      return _ctx.getUserList && _ctx.getUserList.apply(_ctx, arguments);\n    })\n  }, \"조회\"), _createVNode(\"table\", _hoisted_4, [_hoisted_5, _createVNode(\"tbody\", null, [(_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.userList, function (user) {\n    return _openBlock(), _createBlock(\"tr\", {\n      key: user._id\n    }, [_createCommentVNode(\" 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. \"), _createVNode(\"td\", null, _toDisplayString(user.name), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(user.age), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(user.gender), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])]);\n});","map":{"version":3,"sources":["C:\\Coding\\BlockchainEdu-2021\\Vue_class\\test05\\src\\views\\databindinglist3.vue"],"names":[],"mappings":";;;;;;;8BAGY,YAAA,CAA4B,QAA5B,EAA4B;AAApB,EAAA,KAAK,EAAC;AAAc,CAA5B,EAAiB,IAAjB,EAAmB,CAAA;AAAA;AAAnB,C;;8BACA,YAAA,CAAgC,QAAhC,EAAgC;AAAxB,EAAA,KAAK,EAAC;AAAkB,CAAhC,EAAqB,IAArB,EAAuB,CAAA;AAAA;AAAvB,C;;8BACA,YAAA,CAAkC,QAAlC,EAAkC;AAA1B,EAAA,KAAK,EAAC;AAAoB,CAAlC,EAAuB,IAAvB,EAAyB,CAAA;AAAA;AAAzB,C;;;AAII,EAAA,KAAK,EAAC;;;8BACV,YAAA,CAMQ,OANR,EAMQ,IANR,EAMQ,C,aALJ,YAAA,CAIK,IAJL,EAIK,IAJL,EAIK,C,aAHD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAGC,E,aAFD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAEC,E,aADD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CACC,CAJL,CAKI,CANR,E;;AAAA,C;;;;;uBATR,YAAA,CAyBU,KAzBV,EAyBU,IAzBV,EAyBU,C,gBAxBN,YAAA,CAIS,QAJT,EAIS;;aAJQ,IAAA,CAAA,cAAA,GAAc,M;;AAItB,GAJT,E,CACI,U,EACA,U,EACA,U,CAHJ,E;;AAAA,G,mBAAiB,IAAA,CAAA,c,GAwBX,E,gBAnBN,YAAA,CAAwC,OAAxC,EAAwC;AAAjC,IAAA,IAAI,EAAC,MAA4B;;aAAZ,IAAA,CAAA,UAAA,GAAU,M;;AAAE,GAAxC,E,IAAA,E;;AAAA,G,iBAA4B,IAAA,CAAA,U,GAmBtB,EAlBN,YAAA,CAAwC,QAAxC,EAAwC;AAA/B,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,IAAA,CAAA,WAAA,IAAA,IAAA,CAAA,WAAA,OAAA,IAAA,YAAF;AAAA,KAAA;AAA0B,GAAxC,EAA6B,IAA7B,CAkBM,EAjBN,YAAA,CAgBQ,OAhBR,EAAA,UAAA,EAgBQ,CAfJ,UAeI,EARJ,YAAA,CAOQ,OAPR,EAOQ,IAPR,EAOQ,E,kBANJ,YAAA,CAKK,SALL,EAKK,IALL,EAKK,WAAA,CAL8B,IAAA,CAAA,QAK9B,EALsC,UAAhB,IAAgB,EAAZ;yBAA/B,YAAA,CAKK,IALL,EAKK;AALA,MAAA,GAAG,EAAE,IAAI,CAAC;AAKV,KALL,E,CACI,mBAAA,CAAA,2CAAA,C,EACA,YAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAsB,gBAAA,CAAhB,IAAI,CAAC,IAAW,CAAtB,EAAe;AAAA;AAAf,K,EACA,YAAA,CAAqB,IAArB,EAAqB,IAArB,EAAqB,gBAAA,CAAf,IAAI,CAAC,GAAU,CAArB,EAAc;AAAA;AAAd,K,EACA,YAAA,CAAwB,IAAxB,EAAwB,IAAxB,EAAwB,gBAAA,CAAlB,IAAI,CAAC,MAAa,CAAxB,EAAiB;AAAA;AAAjB,K,CAJJ,C;GAKK,CALL,E;;AAAA,GAMI,EAPR,CAQI,CAhBR,CAiBM,CAzBV,C","sourcesContent":["<template>\r\n    <div>\r\n        <select v-model=\"selectedGender\">\r\n            <option value=\"\">전체</option>\r\n            <option value=\"male\">남자</option>\r\n            <option value=\"female\">여자</option>\r\n        </select>\r\n        <input type=\"text\" v-model=\"searchName\">\r\n        <button @click=\"getUserList\">조회</button>\r\n        <table  class=\"userTable\">\r\n            <thead>\r\n                <tr>\r\n                    <td>이름</td>\r\n                    <td>나이</td>\r\n                    <td>성별</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr :key=\"user._id\" v-for=\"user in userList\">\r\n                    <!-- 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. -->\r\n                    <td>{{user.name}}</td>\r\n                    <td>{{user.age}}</td>\r\n                    <td>{{user.gender}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n//axios 사용하기\r\n\r\nexport default {\r\n    name: \"\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            url: \"https://7ea11585-6ca5-4d63-960c-0c79d6d01de2.mock.pstmn.io/getUserList\",\r\n            //나중에 실무에서 서버 개발자가 데이터 url을 알려주고 프론트엔드 개발자는 그 url을 갖다 쓴다.\r\n            userList: [],\r\n            searchName: \"\",\r\n        };\r\n    },\r\n    setup() {},\r\n    created() {},\r\n    mounted() {\r\n        // this.getUserList();\r\n    },\r\n    // data()를 읽은 다음에 mounted()가 실행된다.\r\n    unmounted() {},\r\n  methods: {\r\n        async getUserList() {\r\n            // this.userList = (await axios.get(this.url)).data.data;\r\n            // console.log(this.userList)\r\n            /* 기본 전체 조회 */\r\n\r\n// var userList = (await axios.get(this.url)).data.data;\r\n// // if (this.selectedGender == \"\") {\r\n// //     this.userList = userList;\r\n// //     } else {\r\n// //         this.userList = userList.filter((u) => u.gender == this.selectedGender);\r\n// //     }\r\n/* 남자 여자 조회 */\r\n\r\nvar userList = (await axios.get(this.url)).data.data;\r\n\r\nif(this.selectedGender == \"\") {\r\n    if (this.searchName == \"\") {\r\n        this.userList = userList;\r\n        } else {\r\n            this.userList = userList.filter((u) => u.name.toLowerCase().indexOf(this.searchName.toLowerCase()) > -1);\r\n            }\r\n}else {\r\n    if(this.searchName == \"\"){\r\n        this.userList = userList.filter(u => u.gender == this.selectedGender);\r\n        } else {\r\n            this.userList = userList.filter(\r\n                (u) => u.gender == this.selectedGender &&\r\n                u.name.toLowerCase().indexOf(this.searchName.toLowerCase()) >-1);\r\n            \r\n        }\r\n}\r\n\r\n        }     \r\n       \r\n}\r\n</script>\r\n<style scoped>\r\n\r\n.userTable {\r\n    width: 50%;\r\n    margin: 0 auto;\r\n    align-content: center;\r\n}\r\n\r\ntable,\r\nth,\r\ntd {\r\n    border: 1px solid black;\r\n    border-collapse: collapse;\r\n}\r\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}