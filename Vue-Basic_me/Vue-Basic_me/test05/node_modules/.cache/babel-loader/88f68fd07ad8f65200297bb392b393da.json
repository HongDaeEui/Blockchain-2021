{"ast":null,"code":"import { createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\n\nvar _hoisted_1 = /*#__PURE__*/_createVNode(\"thead\", null, [/*#__PURE__*/_createVNode(\"tr\", null, [/*#__PURE__*/_createVNode(\"td\", null, \"이름\"), /*#__PURE__*/_createVNode(\"td\", null, \"나이\"), /*#__PURE__*/_createVNode(\"td\", null, \"성별\")])], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(\"div\", null, [_createVNode(\"table\", null, [_hoisted_1, _createVNode(\"tbody\", null, [(_openBlock(true), _createBlock(_Fragment, null, _renderList($data.userList, function (user) {\n    return _openBlock(), _createBlock(\"tr\", {\n      key: user._id\n    }, [_createCommentVNode(\" 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. \"), _createVNode(\"td\", null, _toDisplayString(_ctx.drink.drinkId), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(_ctx.drink.drinkName), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(_ctx.drink.price), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, [_withDirectives(_createVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.drink.qty = $event;\n      })\n    }, null, 512\n    /* NEED_PATCH */\n    ), [[_vModelText, _ctx.drink.qty]])]), _createVNode(\"td\", null, _toDisplayString(_ctx.drink.price * _ctx.drink.qty), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])]);\n}","map":{"version":3,"sources":["C:\\Coding\\BlockchainEdu-2021\\Vue_class\\test05\\src\\views\\databindinglist2.vue"],"names":[],"mappings":";;8BAEY,YAAA,CAMQ,OANR,EAMQ,IANR,EAMQ,C,aALJ,YAAA,CAIK,IAJL,EAIK,IAJL,EAIK,C,aAHD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAGC,E,aAFD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAEC,E,aADD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CACC,CAJL,CAKI,CANR,E;;AAAA,C;;;uBADR,YAAA,CAkBkB,KAlBlB,EAkBkB,IAlBlB,EAkBkB,CAlBb,YAAA,CAkBO,OAlBP,EAkBO,IAlBP,EAkBO,CAjBJ,UAiBI,EAVJ,YAAA,CASQ,OATR,EASQ,IATR,EASQ,E,kBARJ,YAAA,CAOK,SAPL,EAOK,IAPL,EAOK,WAAA,CAP8B,KAAA,CAAA,QAO9B,EAPsC,UAAhB,IAAgB,EAAZ;yBAA/B,YAAA,CAOK,IAPL,EAOK;AAPA,MAAA,GAAG,EAAE,IAAI,CAAC;AAOV,KAPL,E,CACI,mBAAA,CAAA,2CAAA,C,EACA,YAAA,CAA0B,IAA1B,EAA0B,IAA1B,EAA0B,gBAAA,CAApB,IAAA,CAAA,KAAA,CAAM,OAAc,CAA1B,EAAmB;AAAA;AAAnB,K,EACA,YAAA,CAA4B,IAA5B,EAA4B,IAA5B,EAA4B,gBAAA,CAAtB,IAAA,CAAA,KAAA,CAAM,SAAgB,CAA5B,EAAqB;AAAA;AAArB,K,EACA,YAAA,CAAwB,IAAxB,EAAwB,IAAxB,EAAwB,gBAAA,CAAlB,IAAA,CAAA,KAAA,CAAM,KAAY,CAAxB,EAAiB;AAAA;AAAjB,K,EACA,YAAA,CAAkD,IAAlD,EAAkD,IAAlD,EAAkD,C,gBAA9C,YAAA,CAAyC,OAAzC,EAAyC;AAAlC,MAAA,IAAI,EAAC,QAA6B;;eAAX,IAAA,CAAA,KAAA,CAAM,GAAN,GAAS,M;;AAAE,KAAzC,E,IAAA,E;;AAAA,K,iBAA8B,IAAA,CAAA,KAAA,CAAM,G,GAAU,CAAlD,C,EACA,YAAA,CAAoC,IAApC,EAAoC,IAApC,EAAoC,gBAAA,CAA9B,IAAA,CAAA,KAAA,CAAM,KAAN,GAAc,IAAA,CAAA,KAAA,CAAM,GAAU,CAApC,EAA6B;AAAA;AAA7B,K,CANJ,C;GAOK,CAPL,E;;AAAA,GAQI,EATR,CAUI,CAlBP,CAkBa,CAlBlB,C","sourcesContent":["<template>\r\n    <div><table>\r\n            <thead>\r\n                <tr>\r\n                    <td>이름</td>\r\n                    <td>나이</td>\r\n                    <td>성별</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr :key=\"user._id\" v-for=\"user in userList\">\r\n                    <!-- 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. -->\r\n                    <td>{{drink.drinkId}}</td>\r\n                    <td>{{drink.drinkName}}</td>\r\n                    <td>{{drink.price}}</td>\r\n                    <td><input type=\"number\" v-model=\"drink.qty\"></td>\r\n                    <td>{{drink.price * drink.qty}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table></div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n//axios 사용하기\r\n\r\nexport default {\r\n    name: \"\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            url: \"https://7ea11585-6ca5-4d63-960c-0c79d6d01de2.mock.pstmn.io/getUserList\",\r\n            userList: [],\r\n        };\r\n    },\r\n    setup() {},\r\n    created() {},\r\n    mounted() {\r\n        this.getUserList();\r\n    },\r\n    // data()를 읽은 다음에 mounted()가 실행된다.\r\n    unmounted() {},\r\n    methods: {\r\n        async getUserList() {\r\n            this.userList = (await axios.get(this.url)).data.data;\r\n            console.log(this.userList)\r\n            console.log(this.userList[0].gender)\r\n        }     \r\n         //여러가지가 담겨있기에 .data를 해줘야 원하는 데이터만 뽑아옴. userList에는 배열안에 data: []가 있어서 다시 한번 data로 접근해줌.\r\n    }\r\n}\r\n</script>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}