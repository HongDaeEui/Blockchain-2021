{"ast":null,"code":"import _asyncToGenerator from \"C:/Coding/BlockchainEdu-2021/Vue_class/test05/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport axios from 'axios'; //axios 사용하기\n\nexport default {\n  name: \"\",\n  components: {},\n  data: function data() {\n    return {\n      url: \"https://7ea11585-6ca5-4d63-960c-0c79d6d01de2.mock.pstmn.io/getUserList\",\n      //나중에 실무에서 서버 개발자가 데이터 url을 알려주고 프론트엔드 개발자는 그 url을 갖다 쓴다.\n      userList: [],\n      searchName: \"\"\n    };\n  },\n  setup: function setup() {},\n  created: function created() {},\n  mounted: function mounted() {// this.getUserList();\n  },\n  // data()를 읽은 다음에 mounted()가 실행된다.\n  unmounted: function unmounted() {},\n  methods: {\n    getUserList: function getUserList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var userList;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(_this.url);\n\n              case 2:\n                userList = _context.sent.data.data;\n\n                if (_this.selectedGender == \"\") {\n                  //성별 선택 안함\n                  if (_this.searchName == \"\") {\n                    //이름 입력 안함\n                    _this.userList = userList;\n                  } else {\n                    //이름 입력함\n                    _this.userList = userList.filter(function (u) {\n                      return u.name.toLowerCase().indexOf(_this.searchName.toLowerCase()) > -1;\n                    });\n                  }\n                } else {\n                  //성별 선택함\n                  if (_this.searchName = \"\") {\n                    //이름 입력안함\n                    _this.userList = userList.filter(function (u) {\n                      return u.gender == _this.selectedGender;\n                    });\n                  } else {\n                    //입력함\n                    _this.userList = userList.filter(function (u) {\n                      return u.gender == _this.selectedGender && u.name.toLowerCase().indexOf(_this.searchName.toLowerCase()) > -1;\n                    });\n                  }\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["C:\\Coding\\BlockchainEdu-2021\\Vue_class\\test05\\src\\views\\databindinglist3.vue"],"names":[],"mappings":";;;;AA6BA,OAAO,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,eAAe;AACX,EAAA,IAAI,EAAE,EADK;AAEX,EAAA,UAAU,EAAE,EAFD;AAGX,EAAA,IAHW,kBAGJ;AACH,WAAO;AACH,MAAA,GAAG,EAAE,wEADF;AAEH;AACA,MAAA,QAAQ,EAAE,EAHP;AAIH,MAAA,UAAU,EAAE;AAJT,KAAP;AAMH,GAVU;AAWX,EAAA,KAXW,mBAWH,CAAE,CAXC;AAYX,EAAA,OAZW,qBAYD,CAAE,CAZD;AAaX,EAAA,OAbW,qBAaD,CACN;AACH,GAfU;AAgBX;AACA,EAAA,SAjBW,uBAiBC,CAAE,CAjBH;AAkBX,EAAA,OAAO,EAAE;AACC,IAAA,WADD,yBACe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACM,KAAK,CAAC,GAAN,CAAU,KAAI,CAAC,GAAf,CADN;;AAAA;AACZ,gBAAA,QADY,iBAC2B,IAD3B,CACgC,IADhC;;AAGhB,oBAAG,KAAI,CAAC,cAAL,IAAuB,EAA1B,EAA+B;AAAE;AAC7B,sBAAG,KAAI,CAAC,UAAL,IAAmB,EAAtB,EAA0B;AAAG;AACzB,oBAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;AACR,mBAFI,MAEE;AAAE;AACH,oBAAA,KAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,MAAT,CAAgB,UAAC,CAAD;AAAA,6BAAO,CAAC,CAAC,IAAF,CAAO,WAAP,GAAqB,OAArB,CAA6B,KAAI,CAAC,UAAL,CAAgB,WAAhB,EAA7B,IAA8D,CAAC,CAAtE;AAAA,qBAAhB,CAAhB;AACL;AACC,iBAND,MAMM;AAAE;AACJ,sBAAG,KAAI,CAAC,UAAL,GAAiB,EAApB,EAAwB;AAAE;AACtB,oBAAA,KAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,MAAT,CAAgB,UAAC,CAAD;AAAA,6BAAO,CAAC,CAAC,MAAF,IAAY,KAAI,CAAC,cAAxB;AAAA,qBAAhB,CAAhB;AACJ,mBAFA,MAGI;AAAE;AACF,oBAAA,KAAI,CAAC,QAAL,GAAgB,QAAQ,CAAC,MAAT,CAAgB,UAAC,CAAD;AAAA,6BAAO,CAAC,CAAC,MAAF,IAAY,KAAI,CAAC,cAAjB,IAAmC,CAAC,CAAC,IAAF,CAAO,WAAP,GAAqB,OAArB,CAA6B,KAAI,CAAC,UAAL,CAAgB,WAAhB,EAA7B,IAA8D,CAAC,CAAzG;AAAA,qBAAhB,CAAhB;AACJ;AAEF;;AAjBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBpB;AApBK;AAlBE,CAAf","sourcesContent":["<template>\r\n    <div>\r\n        <select v-model=\"selectedGender\">\r\n            <option value=\"\">전체</option>\r\n            <option value=\"male\">남자</option>\r\n            <option value=\"female\">여자</option>\r\n        </select>\r\n        <input type=\"text\" v-model=\"searchName\">\r\n        <button @click=\"getUserList\">조회</button>\r\n        <table  class=\"userTable\">\r\n            <thead>\r\n                <tr>\r\n                    <td>이름</td>\r\n                    <td>나이</td>\r\n                    <td>성별</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr :key=\"user._id\" v-for=\"user in userList\">\r\n                    <!-- 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. -->\r\n                    <td>{{user.name}}</td>\r\n                    <td>{{user.age}}</td>\r\n                    <td>{{user.gender}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n//axios 사용하기\r\n\r\nexport default {\r\n    name: \"\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            url: \"https://7ea11585-6ca5-4d63-960c-0c79d6d01de2.mock.pstmn.io/getUserList\",\r\n            //나중에 실무에서 서버 개발자가 데이터 url을 알려주고 프론트엔드 개발자는 그 url을 갖다 쓴다.\r\n            userList: [],\r\n            searchName: \"\",\r\n        };\r\n    },\r\n    setup() {},\r\n    created() {},\r\n    mounted() {\r\n        // this.getUserList();\r\n    },\r\n    // data()를 읽은 다음에 mounted()가 실행된다.\r\n    unmounted() {},\r\n    methods: {\r\n        async getUserList() {\r\n            var userList = (await axios.get(this.url)).data.data;\r\n\r\n            if(this.selectedGender == \"\" ) { //성별 선택 안함\r\n                if(this.searchName == \"\") {  //이름 입력 안함\r\n                    this.userList = userList;\r\n            } else{ //이름 입력함\r\n                 this.userList = userList.filter((u) => u.name.toLowerCase().indexOf(this.searchName.toLowerCase()) > -1);  \r\n            }\r\n            }else { //성별 선택함\r\n                if(this.searchName =\"\") { //이름 입력안함\r\n                    this.userList = userList.filter((u) => u.gender == this.selectedGender);  \r\n                }\r\n                else{ //입력함\r\n                    this.userList = userList.filter((u) => u.gender == this.selectedGender && u.name.toLowerCase().indexOf(this.searchName.toLowerCase()) > -1);\r\n                }\r\n\r\n              }\r\n\r\n        }   \r\n\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n.userTable {\r\n    width: 50%;\r\n    margin: 0 auto;\r\n    align-content: center;\r\n}\r\n\r\ntable,\r\nth,\r\ntd {\r\n    border: 1px solid black;\r\n    border-collapse: collapse;\r\n}\r\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}