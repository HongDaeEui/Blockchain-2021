{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withId = /*#__PURE__*/_withScopeId(\"data-v-7deb6833\");\n\n_pushScopeId(\"data-v-7deb6833\");\n\nvar _hoisted_1 = {\n  class: \"userTable\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createVNode(\"thead\", null, [/*#__PURE__*/_createVNode(\"tr\", null, [/*#__PURE__*/_createVNode(\"td\", null, \"이름\"), /*#__PURE__*/_createVNode(\"td\", null, \"나이\"), /*#__PURE__*/_createVNode(\"td\", null, \"성별\")])], -1\n/* HOISTED */\n);\n\n_popScopeId();\n\nexport var render = /*#__PURE__*/_withId(function (_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(\"div\", null, [_createVNode(\"div\", _hoisted_1, [_createVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.getUserList && $options.getUserList.apply($options, arguments);\n    })\n  }, \"조회\"), _createVNode(\"table\", null, [_hoisted_2, _createVNode(\"tbody\", null, [(_openBlock(true), _createBlock(_Fragment, null, _renderList($data.userList, function (user) {\n    return _openBlock(), _createBlock(\"tr\", {\n      key: user._id\n    }, [_createCommentVNode(\" 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. \"), _createVNode(\"td\", null, _toDisplayString(user.name), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(user.age), 1\n    /* TEXT */\n    ), _createVNode(\"td\", null, _toDisplayString(user.gender), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])])]);\n});","map":{"version":3,"sources":["C:\\Coding\\BlockchainEdu-2021\\Vue_class\\test05\\src\\views\\databindinglist2.vue"],"names":[],"mappings":";;;;;;;;AAEc,EAAA,KAAK,EAAC;;;8BAGR,YAAA,CAMQ,OANR,EAMQ,IANR,EAMQ,C,aALJ,YAAA,CAIK,IAJL,EAIK,IAJL,EAIK,C,aAHD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAGC,E,aAFD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CAEC,E,aADD,YAAA,CAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,CACC,CAJL,CAKI,CANR,E;;AAAA,C;;;;;uBAJR,YAAA,CAqBU,KArBV,EAqBU,IArBV,EAqBU,CApBN,YAAA,CAmBM,KAnBN,EAAA,UAAA,EAmBM,CAlBN,YAAA,CAAwC,QAAxC,EAAwC;AAA/B,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,WAAA,IAAA,QAAA,CAAA,WAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAA0B,GAAxC,EAA6B,IAA7B,CAkBM,EAjBN,YAAA,CAgBQ,OAhBR,EAgBQ,IAhBR,EAgBQ,CAfJ,UAeI,EARJ,YAAA,CAOQ,OAPR,EAOQ,IAPR,EAOQ,E,kBANJ,YAAA,CAKK,SALL,EAKK,IALL,EAKK,WAAA,CAL8B,KAAA,CAAA,QAK9B,EALsC,UAAhB,IAAgB,EAAZ;yBAA/B,YAAA,CAKK,IALL,EAKK;AALA,MAAA,GAAG,EAAE,IAAI,CAAC;AAKV,KALL,E,CACI,mBAAA,CAAA,2CAAA,C,EACA,YAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAsB,gBAAA,CAAhB,IAAI,CAAC,IAAW,CAAtB,EAAe;AAAA;AAAf,K,EACA,YAAA,CAAqB,IAArB,EAAqB,IAArB,EAAqB,gBAAA,CAAf,IAAI,CAAC,GAAU,CAArB,EAAc;AAAA;AAAd,K,EACA,YAAA,CAAwB,IAAxB,EAAwB,IAAxB,EAAwB,gBAAA,CAAlB,IAAI,CAAC,MAAa,CAAxB,EAAiB;AAAA;AAAjB,K,CAJJ,C;GAKK,CALL,E;;AAAA,GAMI,EAPR,CAQI,CAhBR,CAiBM,CAnBN,CAoBM,CArBV,C","sourcesContent":["<template>\r\n    <div>\r\n        <div  class=\"userTable\">\r\n        <button @click=\"getUserList\">조회</button>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>이름</td>\r\n                    <td>나이</td>\r\n                    <td>성별</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr :key=\"user._id\" v-for=\"user in userList\">\r\n                    <!-- 행의 key값과 행의 각 컬럼들의 값들을 정해주고, for문을 돌린다. -->\r\n                    <td>{{user.name}}</td>\r\n                    <td>{{user.age}}</td>\r\n                    <td>{{user.gender}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n//axios 사용하기\r\n\r\nexport default {\r\n    name: \"\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            url: \"https://7ea11585-6ca5-4d63-960c-0c79d6d01de2.mock.pstmn.io/getUserList\",\r\n            userList: [],\r\n        };\r\n    },\r\n    setup() {},\r\n    created() {},\r\n    mounted() {\r\n        // this.getUserList();\r\n    },\r\n    // data()를 읽은 다음에 mounted()가 실행된다.\r\n    unmounted() {},\r\n    methods: {\r\n        async getUserList() {\r\n            this.userList = (await axios.get(this.url)).data.data;\r\n            console.log(this.userList)\r\n            console.log(this.userList[0].gender)\r\n        }     \r\n         //여러가지가 담겨있기에 .data를 해줘야 원하는 데이터만 뽑아옴. userList에는 배열안에 data: []가 있어서 다시 한번 data로 접근해줌.\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n.userTable {\r\n    width: 50%;\r\n    margin: 0 auto;\r\n    align-content: center;\r\n}\r\n\r\ntable,\r\nth,\r\ntd {\r\n    border: 1px solid black;\r\n    border-collapse: collapse;\r\n}\r\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}